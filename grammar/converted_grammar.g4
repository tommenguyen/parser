PROGRAM -> DECLLIST

DECLLIST -> DECL DECLLIST' | ''
DECLLIST' -> DECL DECLLIST' | ''

DECL -> FUNCDECL | VARDECL

FUNCDECL -> TYPE IDENTIFIER PARALIST COMPOUNDSTMT
VARDECL -> TYPE INITDECLARATORLIST ;

INITDECLARATORLIST -> INITDECLARATOR INITDECLARATORLIST'
INITDECLARATORLIST' -> , INITDECLARATOR INITDECLARATORLIST' | ''

INITDECLARATOR -> DECLARATOR INITDECLARATOR'
INITDECLARATOR' -> = INITIALISER | ''

DECLARATOR -> IDENTIFIER DECLARATOR'
DECLARATOR' -> [ INTLITERAL' ] | ''

INTLITERAL' -> intliteral | ''

INITIALISER -> EXPR | { EXPR INITIALISER'
INITIALISER' -> , EXPR INITIALISER' | }


TYPE -> void | boolean | int | float


IDENTIFIER -> id


COMPOUNDSTMT -> { VARDECLLIST STMTLIST }

VARDECLLIST -> VARDECL VARDECLLIST | ''
STMTLIST -> STMT STMTLIST | ''


STMT -> COMPOUNDSTMT
      | IFSTMT
      | FORSTMT
      | WHILESTMT
      | BREAKSTMT
      | CONTINUESTMT
      | RETURNSTMT
      | EXPRSTMT


IFSTMT -> IF ( EXPR ) STMT IFSTMT'
IFSTMT' -> else STMT | ''

FORSTMT -> FOR ( EXPRSTMT EXPRSTMT EXPRSTMT ) STMT

WHILESTMT -> WHILE ( EXPR ) STMT

BREAKSTMT -> BREAK ;

CONTINUESTMT -> CONTINUE ;

RETURNSTMT -> RETURN RETURNSTMT'
RETURNSTMT' -> EXPR ; | ;

EXPRSTMT -> EXPRSTMT'
EXPRSTMT' -> EXPR ; | ;





EXPR -> ASSIGNMENTEXPR

ASSIGNMENTEXPR -> CONDOREXPR ASSIGNMENTEXPR'
ASSIGNMENTEXPR' -> = ASSIGNMENTEXPR | ''

CONDOREXPR -> CONDANDEXPR CONDOREXPR'
CONDOREXPR' -> || CONDANDEXPR CONDOREXPR' | ''


CONDANDEXPR -> EQUALITYEXPR CONDANDEXPR'
CONDANDEXPR' -> && EQUALITYEXPR CONDANDEXPR' | ''

EQUALITYEXPR -> RELEXPR EQUALITYEXPR'
EQUALITYEXPR' -> == RELEXPR EQUALITYEXPR' | != RELEXPR EQUALITYEXPR' | ''

RELEXPR -> ADDITIVEEXPR RELEXPR'
RELEXPR' -> < ADDITIVEEXPR RELEXPR' | <= ADDITIVEEXPR RELEXPR' | > ADDITIVEEXPR RELEXPR' | >= ADDITIVEEXPR RELEXPR' | ''

ADDITIVEEXPR -> MULTIPLICATIVEEXPR ADDITIVEEXPR'
ADDITIVEEXPR' -> + MULTIPLICATIVEEXPR ADDITIVEEXPR' | - MULTIPLICATIVEEXPR ADDITIVEEXPR' | ''

MULTIPLICATIVEEXPR -> UNARYEXPR MULTIPLICATIVEEXPR'
MULTIPLICATIVEEXPR' -> * UNARYEXPR MULTIPLICATIVEEXPR' | / UNARYEXPR MULTIPLICATIVEEXPR' | ''

UNARYEXPR -> + UNARYEXPR | - UNARYEXPR | ! UNARYEXPR | PRIMARYEXPR

PRIMARYEXPR -> IDENTIFIER PRIMARYEXPR'
PRIMARYEXPR' -> ARGLIST | [ EXPR ] | ''
PRIMARYEXPR -> ( EXPR ) | intliteral | floatliteral | boolliteral | stringliteral


PARALIST -> ( PARALIST' )
PARALIST' -> PROPERPARALIST | ''

PROPERPARALIST -> PARADECL PROPERPARALIST'
PROPERPARALIST' -> , PARADECL PROPERPARALIST' | ''

PARADECL -> TYPE DECLARATOR

ARGLIST -> ( ARGLIST' )
ARGLIST' -> PROPERARGLIST | ''

PROPERARGLIST -> ARG PROPERARGLIST'
PROPERARGLIST' -> , ARG PROPERARGLIST' | ''

ARG -> EXPR